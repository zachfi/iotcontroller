// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: iot/v1/iot.proto

package iotv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IOTService_UpdateDevice_FullMethodName = "/iot.v1.IOTService/UpdateDevice"
)

// IOTServiceClient is the client API for IOTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TODO: implement
type IOTServiceClient interface {
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error)
}

type iOTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIOTServiceClient(cc grpc.ClientConnInterface) IOTServiceClient {
	return &iOTServiceClient{cc}
}

func (c *iOTServiceClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDeviceResponse)
	err := c.cc.Invoke(ctx, IOTService_UpdateDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IOTServiceServer is the server API for IOTService service.
// All implementations should embed UnimplementedIOTServiceServer
// for forward compatibility.
//
// TODO: implement
type IOTServiceServer interface {
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*UpdateDeviceResponse, error)
}

// UnimplementedIOTServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIOTServiceServer struct{}

func (UnimplementedIOTServiceServer) UpdateDevice(context.Context, *UpdateDeviceRequest) (*UpdateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedIOTServiceServer) testEmbeddedByValue() {}

// UnsafeIOTServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IOTServiceServer will
// result in compilation errors.
type UnsafeIOTServiceServer interface {
	mustEmbedUnimplementedIOTServiceServer()
}

func RegisterIOTServiceServer(s grpc.ServiceRegistrar, srv IOTServiceServer) {
	// If the following call pancis, it indicates UnimplementedIOTServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IOTService_ServiceDesc, srv)
}

func _IOTService_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOTServiceServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IOTService_UpdateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOTServiceServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IOTService_ServiceDesc is the grpc.ServiceDesc for IOTService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IOTService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iot.v1.IOTService",
	HandlerType: (*IOTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateDevice",
			Handler:    _IOTService_UpdateDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iot/v1/iot.proto",
}

const (
	EventReceiverService_Event_FullMethodName = "/iot.v1.EventReceiverService/Event"
)

// EventReceiverServiceClient is the client API for EventReceiverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventReceiverServiceClient interface {
	Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
}

type eventReceiverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventReceiverServiceClient(cc grpc.ClientConnInterface) EventReceiverServiceClient {
	return &eventReceiverServiceClient{cc}
}

func (c *eventReceiverServiceClient) Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, EventReceiverService_Event_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventReceiverServiceServer is the server API for EventReceiverService service.
// All implementations should embed UnimplementedEventReceiverServiceServer
// for forward compatibility.
type EventReceiverServiceServer interface {
	Event(context.Context, *EventRequest) (*EventResponse, error)
}

// UnimplementedEventReceiverServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventReceiverServiceServer struct{}

func (UnimplementedEventReceiverServiceServer) Event(context.Context, *EventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Event not implemented")
}
func (UnimplementedEventReceiverServiceServer) testEmbeddedByValue() {}

// UnsafeEventReceiverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventReceiverServiceServer will
// result in compilation errors.
type UnsafeEventReceiverServiceServer interface {
	mustEmbedUnimplementedEventReceiverServiceServer()
}

func RegisterEventReceiverServiceServer(s grpc.ServiceRegistrar, srv EventReceiverServiceServer) {
	// If the following call pancis, it indicates UnimplementedEventReceiverServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventReceiverService_ServiceDesc, srv)
}

func _EventReceiverService_Event_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventReceiverServiceServer).Event(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventReceiverService_Event_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventReceiverServiceServer).Event(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventReceiverService_ServiceDesc is the grpc.ServiceDesc for EventReceiverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventReceiverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iot.v1.EventReceiverService",
	HandlerType: (*EventReceiverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Event",
			Handler:    _EventReceiverService_Event_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iot/v1/iot.proto",
}

const (
	RouteService_Send_FullMethodName = "/iot.v1.RouteService/Send"
)

// RouteServiceClient is the client API for RouteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteServiceClient interface {
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
}

type routeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteServiceClient(cc grpc.ClientConnInterface) RouteServiceClient {
	return &routeServiceClient{cc}
}

func (c *routeServiceClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, RouteService_Send_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouteServiceServer is the server API for RouteService service.
// All implementations should embed UnimplementedRouteServiceServer
// for forward compatibility.
type RouteServiceServer interface {
	Send(context.Context, *SendRequest) (*SendResponse, error)
}

// UnimplementedRouteServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRouteServiceServer struct{}

func (UnimplementedRouteServiceServer) Send(context.Context, *SendRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedRouteServiceServer) testEmbeddedByValue() {}

// UnsafeRouteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteServiceServer will
// result in compilation errors.
type UnsafeRouteServiceServer interface {
	mustEmbedUnimplementedRouteServiceServer()
}

func RegisterRouteServiceServer(s grpc.ServiceRegistrar, srv RouteServiceServer) {
	// If the following call pancis, it indicates UnimplementedRouteServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RouteService_ServiceDesc, srv)
}

func _RouteService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouteService_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RouteService_ServiceDesc is the grpc.ServiceDesc for RouteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iot.v1.RouteService",
	HandlerType: (*RouteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _RouteService_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iot/v1/iot.proto",
}

const (
	ZoneKeeperService_SetState_FullMethodName      = "/iot.v1.ZoneKeeperService/SetState"
	ZoneKeeperService_SetScene_FullMethodName      = "/iot.v1.ZoneKeeperService/SetScene"
	ZoneKeeperService_GetDeviceZone_FullMethodName = "/iot.v1.ZoneKeeperService/GetDeviceZone"
	ZoneKeeperService_ActionHandler_FullMethodName = "/iot.v1.ZoneKeeperService/ActionHandler"
	ZoneKeeperService_SelfAnnounce_FullMethodName  = "/iot.v1.ZoneKeeperService/SelfAnnounce"
)

// ZoneKeeperServiceClient is the client API for ZoneKeeperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZoneKeeperServiceClient interface {
	SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error)
	SetScene(ctx context.Context, in *SetSceneRequest, opts ...grpc.CallOption) (*SetSceneResponse, error)
	GetDeviceZone(ctx context.Context, in *GetDeviceZoneRequest, opts ...grpc.CallOption) (*GetDeviceZoneResponse, error)
	ActionHandler(ctx context.Context, in *ActionHandlerRequest, opts ...grpc.CallOption) (*ActionHandlerResponse, error)
	SelfAnnounce(ctx context.Context, in *SelfAnnounceRequest, opts ...grpc.CallOption) (*SelfAnnounceResponse, error)
}

type zoneKeeperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewZoneKeeperServiceClient(cc grpc.ClientConnInterface) ZoneKeeperServiceClient {
	return &zoneKeeperServiceClient{cc}
}

func (c *zoneKeeperServiceClient) SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetStateResponse)
	err := c.cc.Invoke(ctx, ZoneKeeperService_SetState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneKeeperServiceClient) SetScene(ctx context.Context, in *SetSceneRequest, opts ...grpc.CallOption) (*SetSceneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetSceneResponse)
	err := c.cc.Invoke(ctx, ZoneKeeperService_SetScene_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneKeeperServiceClient) GetDeviceZone(ctx context.Context, in *GetDeviceZoneRequest, opts ...grpc.CallOption) (*GetDeviceZoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeviceZoneResponse)
	err := c.cc.Invoke(ctx, ZoneKeeperService_GetDeviceZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneKeeperServiceClient) ActionHandler(ctx context.Context, in *ActionHandlerRequest, opts ...grpc.CallOption) (*ActionHandlerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionHandlerResponse)
	err := c.cc.Invoke(ctx, ZoneKeeperService_ActionHandler_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneKeeperServiceClient) SelfAnnounce(ctx context.Context, in *SelfAnnounceRequest, opts ...grpc.CallOption) (*SelfAnnounceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SelfAnnounceResponse)
	err := c.cc.Invoke(ctx, ZoneKeeperService_SelfAnnounce_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZoneKeeperServiceServer is the server API for ZoneKeeperService service.
// All implementations should embed UnimplementedZoneKeeperServiceServer
// for forward compatibility.
type ZoneKeeperServiceServer interface {
	SetState(context.Context, *SetStateRequest) (*SetStateResponse, error)
	SetScene(context.Context, *SetSceneRequest) (*SetSceneResponse, error)
	GetDeviceZone(context.Context, *GetDeviceZoneRequest) (*GetDeviceZoneResponse, error)
	ActionHandler(context.Context, *ActionHandlerRequest) (*ActionHandlerResponse, error)
	SelfAnnounce(context.Context, *SelfAnnounceRequest) (*SelfAnnounceResponse, error)
}

// UnimplementedZoneKeeperServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedZoneKeeperServiceServer struct{}

func (UnimplementedZoneKeeperServiceServer) SetState(context.Context, *SetStateRequest) (*SetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (UnimplementedZoneKeeperServiceServer) SetScene(context.Context, *SetSceneRequest) (*SetSceneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetScene not implemented")
}
func (UnimplementedZoneKeeperServiceServer) GetDeviceZone(context.Context, *GetDeviceZoneRequest) (*GetDeviceZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceZone not implemented")
}
func (UnimplementedZoneKeeperServiceServer) ActionHandler(context.Context, *ActionHandlerRequest) (*ActionHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionHandler not implemented")
}
func (UnimplementedZoneKeeperServiceServer) SelfAnnounce(context.Context, *SelfAnnounceRequest) (*SelfAnnounceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelfAnnounce not implemented")
}
func (UnimplementedZoneKeeperServiceServer) testEmbeddedByValue() {}

// UnsafeZoneKeeperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZoneKeeperServiceServer will
// result in compilation errors.
type UnsafeZoneKeeperServiceServer interface {
	mustEmbedUnimplementedZoneKeeperServiceServer()
}

func RegisterZoneKeeperServiceServer(s grpc.ServiceRegistrar, srv ZoneKeeperServiceServer) {
	// If the following call pancis, it indicates UnimplementedZoneKeeperServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ZoneKeeperService_ServiceDesc, srv)
}

func _ZoneKeeperService_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneKeeperServiceServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZoneKeeperService_SetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneKeeperServiceServer).SetState(ctx, req.(*SetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZoneKeeperService_SetScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneKeeperServiceServer).SetScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZoneKeeperService_SetScene_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneKeeperServiceServer).SetScene(ctx, req.(*SetSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZoneKeeperService_GetDeviceZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneKeeperServiceServer).GetDeviceZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZoneKeeperService_GetDeviceZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneKeeperServiceServer).GetDeviceZone(ctx, req.(*GetDeviceZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZoneKeeperService_ActionHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneKeeperServiceServer).ActionHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZoneKeeperService_ActionHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneKeeperServiceServer).ActionHandler(ctx, req.(*ActionHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZoneKeeperService_SelfAnnounce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelfAnnounceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneKeeperServiceServer).SelfAnnounce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZoneKeeperService_SelfAnnounce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneKeeperServiceServer).SelfAnnounce(ctx, req.(*SelfAnnounceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZoneKeeperService_ServiceDesc is the grpc.ServiceDesc for ZoneKeeperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZoneKeeperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iot.v1.ZoneKeeperService",
	HandlerType: (*ZoneKeeperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetState",
			Handler:    _ZoneKeeperService_SetState_Handler,
		},
		{
			MethodName: "SetScene",
			Handler:    _ZoneKeeperService_SetScene_Handler,
		},
		{
			MethodName: "GetDeviceZone",
			Handler:    _ZoneKeeperService_GetDeviceZone_Handler,
		},
		{
			MethodName: "ActionHandler",
			Handler:    _ZoneKeeperService_ActionHandler_Handler,
		},
		{
			MethodName: "SelfAnnounce",
			Handler:    _ZoneKeeperService_SelfAnnounce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iot/v1/iot.proto",
}
