// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: iot/v1/iot.proto

package iotv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IOTServiceClient is the client API for IOTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IOTServiceClient interface {
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error)
}

type iOTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIOTServiceClient(cc grpc.ClientConnInterface) IOTServiceClient {
	return &iOTServiceClient{cc}
}

func (c *iOTServiceClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error) {
	out := new(UpdateDeviceResponse)
	err := c.cc.Invoke(ctx, "/iot.v1.IOTService/UpdateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IOTServiceServer is the server API for IOTService service.
// All implementations should embed UnimplementedIOTServiceServer
// for forward compatibility
type IOTServiceServer interface {
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*UpdateDeviceResponse, error)
}

// UnimplementedIOTServiceServer should be embedded to have forward compatible implementations.
type UnimplementedIOTServiceServer struct {
}

func (UnimplementedIOTServiceServer) UpdateDevice(context.Context, *UpdateDeviceRequest) (*UpdateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}

// UnsafeIOTServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IOTServiceServer will
// result in compilation errors.
type UnsafeIOTServiceServer interface {
	mustEmbedUnimplementedIOTServiceServer()
}

func RegisterIOTServiceServer(s grpc.ServiceRegistrar, srv IOTServiceServer) {
	s.RegisterService(&IOTService_ServiceDesc, srv)
}

func _IOTService_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOTServiceServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot.v1.IOTService/UpdateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOTServiceServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IOTService_ServiceDesc is the grpc.ServiceDesc for IOTService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IOTService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iot.v1.IOTService",
	HandlerType: (*IOTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateDevice",
			Handler:    _IOTService_UpdateDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iot/v1/iot.proto",
}

// AlertReceiverServiceClient is the client API for AlertReceiverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertReceiverServiceClient interface {
	Alert(ctx context.Context, in *AlertRequest, opts ...grpc.CallOption) (*AlertResponse, error)
}

type alertReceiverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertReceiverServiceClient(cc grpc.ClientConnInterface) AlertReceiverServiceClient {
	return &alertReceiverServiceClient{cc}
}

func (c *alertReceiverServiceClient) Alert(ctx context.Context, in *AlertRequest, opts ...grpc.CallOption) (*AlertResponse, error) {
	out := new(AlertResponse)
	err := c.cc.Invoke(ctx, "/iot.v1.AlertReceiverService/Alert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertReceiverServiceServer is the server API for AlertReceiverService service.
// All implementations should embed UnimplementedAlertReceiverServiceServer
// for forward compatibility
type AlertReceiverServiceServer interface {
	Alert(context.Context, *AlertRequest) (*AlertResponse, error)
}

// UnimplementedAlertReceiverServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAlertReceiverServiceServer struct {
}

func (UnimplementedAlertReceiverServiceServer) Alert(context.Context, *AlertRequest) (*AlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Alert not implemented")
}

// UnsafeAlertReceiverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertReceiverServiceServer will
// result in compilation errors.
type UnsafeAlertReceiverServiceServer interface {
	mustEmbedUnimplementedAlertReceiverServiceServer()
}

func RegisterAlertReceiverServiceServer(s grpc.ServiceRegistrar, srv AlertReceiverServiceServer) {
	s.RegisterService(&AlertReceiverService_ServiceDesc, srv)
}

func _AlertReceiverService_Alert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertReceiverServiceServer).Alert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot.v1.AlertReceiverService/Alert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertReceiverServiceServer).Alert(ctx, req.(*AlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AlertReceiverService_ServiceDesc is the grpc.ServiceDesc for AlertReceiverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertReceiverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iot.v1.AlertReceiverService",
	HandlerType: (*AlertReceiverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Alert",
			Handler:    _AlertReceiverService_Alert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iot/v1/iot.proto",
}

// ZoneKeeperServiceClient is the client API for ZoneKeeperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZoneKeeperServiceClient interface {
	SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error)
	GetDeviceZone(ctx context.Context, in *GetDeviceZoneRequest, opts ...grpc.CallOption) (*GetDeviceZoneResponse, error)
	ActionHandler(ctx context.Context, in *ActionHandlerRequest, opts ...grpc.CallOption) (*ActionHandlerResponse, error)
}

type zoneKeeperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewZoneKeeperServiceClient(cc grpc.ClientConnInterface) ZoneKeeperServiceClient {
	return &zoneKeeperServiceClient{cc}
}

func (c *zoneKeeperServiceClient) SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error) {
	out := new(SetStateResponse)
	err := c.cc.Invoke(ctx, "/iot.v1.ZoneKeeperService/SetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneKeeperServiceClient) GetDeviceZone(ctx context.Context, in *GetDeviceZoneRequest, opts ...grpc.CallOption) (*GetDeviceZoneResponse, error) {
	out := new(GetDeviceZoneResponse)
	err := c.cc.Invoke(ctx, "/iot.v1.ZoneKeeperService/GetDeviceZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneKeeperServiceClient) ActionHandler(ctx context.Context, in *ActionHandlerRequest, opts ...grpc.CallOption) (*ActionHandlerResponse, error) {
	out := new(ActionHandlerResponse)
	err := c.cc.Invoke(ctx, "/iot.v1.ZoneKeeperService/ActionHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZoneKeeperServiceServer is the server API for ZoneKeeperService service.
// All implementations should embed UnimplementedZoneKeeperServiceServer
// for forward compatibility
type ZoneKeeperServiceServer interface {
	SetState(context.Context, *SetStateRequest) (*SetStateResponse, error)
	GetDeviceZone(context.Context, *GetDeviceZoneRequest) (*GetDeviceZoneResponse, error)
	ActionHandler(context.Context, *ActionHandlerRequest) (*ActionHandlerResponse, error)
}

// UnimplementedZoneKeeperServiceServer should be embedded to have forward compatible implementations.
type UnimplementedZoneKeeperServiceServer struct {
}

func (UnimplementedZoneKeeperServiceServer) SetState(context.Context, *SetStateRequest) (*SetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (UnimplementedZoneKeeperServiceServer) GetDeviceZone(context.Context, *GetDeviceZoneRequest) (*GetDeviceZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceZone not implemented")
}
func (UnimplementedZoneKeeperServiceServer) ActionHandler(context.Context, *ActionHandlerRequest) (*ActionHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionHandler not implemented")
}

// UnsafeZoneKeeperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZoneKeeperServiceServer will
// result in compilation errors.
type UnsafeZoneKeeperServiceServer interface {
	mustEmbedUnimplementedZoneKeeperServiceServer()
}

func RegisterZoneKeeperServiceServer(s grpc.ServiceRegistrar, srv ZoneKeeperServiceServer) {
	s.RegisterService(&ZoneKeeperService_ServiceDesc, srv)
}

func _ZoneKeeperService_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneKeeperServiceServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot.v1.ZoneKeeperService/SetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneKeeperServiceServer).SetState(ctx, req.(*SetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZoneKeeperService_GetDeviceZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneKeeperServiceServer).GetDeviceZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot.v1.ZoneKeeperService/GetDeviceZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneKeeperServiceServer).GetDeviceZone(ctx, req.(*GetDeviceZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZoneKeeperService_ActionHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneKeeperServiceServer).ActionHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot.v1.ZoneKeeperService/ActionHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneKeeperServiceServer).ActionHandler(ctx, req.(*ActionHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZoneKeeperService_ServiceDesc is the grpc.ServiceDesc for ZoneKeeperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZoneKeeperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iot.v1.ZoneKeeperService",
	HandlerType: (*ZoneKeeperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetState",
			Handler:    _ZoneKeeperService_SetState_Handler,
		},
		{
			MethodName: "GetDeviceZone",
			Handler:    _ZoneKeeperService_GetDeviceZone_Handler,
		},
		{
			MethodName: "ActionHandler",
			Handler:    _ZoneKeeperService_ActionHandler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iot/v1/iot.proto",
}
