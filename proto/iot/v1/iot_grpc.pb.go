// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: iot/v1/iot.proto

package iotv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IOTServiceClient is the client API for IOTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IOTServiceClient interface {
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error)
}

type iOTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIOTServiceClient(cc grpc.ClientConnInterface) IOTServiceClient {
	return &iOTServiceClient{cc}
}

func (c *iOTServiceClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error) {
	out := new(UpdateDeviceResponse)
	err := c.cc.Invoke(ctx, "/iot.v1.IOTService/UpdateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IOTServiceServer is the server API for IOTService service.
// All implementations should embed UnimplementedIOTServiceServer
// for forward compatibility
type IOTServiceServer interface {
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*UpdateDeviceResponse, error)
}

// UnimplementedIOTServiceServer should be embedded to have forward compatible implementations.
type UnimplementedIOTServiceServer struct {
}

func (UnimplementedIOTServiceServer) UpdateDevice(context.Context, *UpdateDeviceRequest) (*UpdateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}

// UnsafeIOTServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IOTServiceServer will
// result in compilation errors.
type UnsafeIOTServiceServer interface {
	mustEmbedUnimplementedIOTServiceServer()
}

func RegisterIOTServiceServer(s grpc.ServiceRegistrar, srv IOTServiceServer) {
	s.RegisterService(&IOTService_ServiceDesc, srv)
}

func _IOTService_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IOTServiceServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot.v1.IOTService/UpdateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IOTServiceServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IOTService_ServiceDesc is the grpc.ServiceDesc for IOTService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IOTService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iot.v1.IOTService",
	HandlerType: (*IOTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateDevice",
			Handler:    _IOTService_UpdateDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iot/v1/iot.proto",
}

// EventReceiverServiceClient is the client API for EventReceiverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventReceiverServiceClient interface {
	Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
}

type eventReceiverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventReceiverServiceClient(cc grpc.ClientConnInterface) EventReceiverServiceClient {
	return &eventReceiverServiceClient{cc}
}

func (c *eventReceiverServiceClient) Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/iot.v1.EventReceiverService/Event", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventReceiverServiceServer is the server API for EventReceiverService service.
// All implementations should embed UnimplementedEventReceiverServiceServer
// for forward compatibility
type EventReceiverServiceServer interface {
	Event(context.Context, *EventRequest) (*EventResponse, error)
}

// UnimplementedEventReceiverServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEventReceiverServiceServer struct {
}

func (UnimplementedEventReceiverServiceServer) Event(context.Context, *EventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Event not implemented")
}

// UnsafeEventReceiverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventReceiverServiceServer will
// result in compilation errors.
type UnsafeEventReceiverServiceServer interface {
	mustEmbedUnimplementedEventReceiverServiceServer()
}

func RegisterEventReceiverServiceServer(s grpc.ServiceRegistrar, srv EventReceiverServiceServer) {
	s.RegisterService(&EventReceiverService_ServiceDesc, srv)
}

func _EventReceiverService_Event_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventReceiverServiceServer).Event(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot.v1.EventReceiverService/Event",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventReceiverServiceServer).Event(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventReceiverService_ServiceDesc is the grpc.ServiceDesc for EventReceiverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventReceiverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iot.v1.EventReceiverService",
	HandlerType: (*EventReceiverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Event",
			Handler:    _EventReceiverService_Event_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iot/v1/iot.proto",
}

// RouteServiceClient is the client API for RouteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteServiceClient interface {
	Route(ctx context.Context, opts ...grpc.CallOption) (RouteService_RouteClient, error)
}

type routeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteServiceClient(cc grpc.ClientConnInterface) RouteServiceClient {
	return &routeServiceClient{cc}
}

func (c *routeServiceClient) Route(ctx context.Context, opts ...grpc.CallOption) (RouteService_RouteClient, error) {
	stream, err := c.cc.NewStream(ctx, &RouteService_ServiceDesc.Streams[0], "/iot.v1.RouteService/Route", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeServiceRouteClient{stream}
	return x, nil
}

type RouteService_RouteClient interface {
	Send(*RouteRequest) error
	CloseAndRecv() (*RouteResponse, error)
	grpc.ClientStream
}

type routeServiceRouteClient struct {
	grpc.ClientStream
}

func (x *routeServiceRouteClient) Send(m *RouteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routeServiceRouteClient) CloseAndRecv() (*RouteResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RouteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RouteServiceServer is the server API for RouteService service.
// All implementations should embed UnimplementedRouteServiceServer
// for forward compatibility
type RouteServiceServer interface {
	Route(RouteService_RouteServer) error
}

// UnimplementedRouteServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRouteServiceServer struct {
}

func (UnimplementedRouteServiceServer) Route(RouteService_RouteServer) error {
	return status.Errorf(codes.Unimplemented, "method Route not implemented")
}

// UnsafeRouteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteServiceServer will
// result in compilation errors.
type UnsafeRouteServiceServer interface {
	mustEmbedUnimplementedRouteServiceServer()
}

func RegisterRouteServiceServer(s grpc.ServiceRegistrar, srv RouteServiceServer) {
	s.RegisterService(&RouteService_ServiceDesc, srv)
}

func _RouteService_Route_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteServiceServer).Route(&routeServiceRouteServer{stream})
}

type RouteService_RouteServer interface {
	SendAndClose(*RouteResponse) error
	Recv() (*RouteRequest, error)
	grpc.ServerStream
}

type routeServiceRouteServer struct {
	grpc.ServerStream
}

func (x *routeServiceRouteServer) SendAndClose(m *RouteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routeServiceRouteServer) Recv() (*RouteRequest, error) {
	m := new(RouteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RouteService_ServiceDesc is the grpc.ServiceDesc for RouteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iot.v1.RouteService",
	HandlerType: (*RouteServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Route",
			Handler:       _RouteService_Route_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "iot/v1/iot.proto",
}

// ZoneKeeperServiceClient is the client API for ZoneKeeperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZoneKeeperServiceClient interface {
	SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error)
	GetDeviceZone(ctx context.Context, in *GetDeviceZoneRequest, opts ...grpc.CallOption) (*GetDeviceZoneResponse, error)
	ActionHandler(ctx context.Context, in *ActionHandlerRequest, opts ...grpc.CallOption) (*ActionHandlerResponse, error)
	SelfAnnounce(ctx context.Context, in *SelfAnnounceRequest, opts ...grpc.CallOption) (*SelfAnnounceResponse, error)
}

type zoneKeeperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewZoneKeeperServiceClient(cc grpc.ClientConnInterface) ZoneKeeperServiceClient {
	return &zoneKeeperServiceClient{cc}
}

func (c *zoneKeeperServiceClient) SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error) {
	out := new(SetStateResponse)
	err := c.cc.Invoke(ctx, "/iot.v1.ZoneKeeperService/SetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneKeeperServiceClient) GetDeviceZone(ctx context.Context, in *GetDeviceZoneRequest, opts ...grpc.CallOption) (*GetDeviceZoneResponse, error) {
	out := new(GetDeviceZoneResponse)
	err := c.cc.Invoke(ctx, "/iot.v1.ZoneKeeperService/GetDeviceZone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneKeeperServiceClient) ActionHandler(ctx context.Context, in *ActionHandlerRequest, opts ...grpc.CallOption) (*ActionHandlerResponse, error) {
	out := new(ActionHandlerResponse)
	err := c.cc.Invoke(ctx, "/iot.v1.ZoneKeeperService/ActionHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneKeeperServiceClient) SelfAnnounce(ctx context.Context, in *SelfAnnounceRequest, opts ...grpc.CallOption) (*SelfAnnounceResponse, error) {
	out := new(SelfAnnounceResponse)
	err := c.cc.Invoke(ctx, "/iot.v1.ZoneKeeperService/SelfAnnounce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZoneKeeperServiceServer is the server API for ZoneKeeperService service.
// All implementations should embed UnimplementedZoneKeeperServiceServer
// for forward compatibility
type ZoneKeeperServiceServer interface {
	SetState(context.Context, *SetStateRequest) (*SetStateResponse, error)
	GetDeviceZone(context.Context, *GetDeviceZoneRequest) (*GetDeviceZoneResponse, error)
	ActionHandler(context.Context, *ActionHandlerRequest) (*ActionHandlerResponse, error)
	SelfAnnounce(context.Context, *SelfAnnounceRequest) (*SelfAnnounceResponse, error)
}

// UnimplementedZoneKeeperServiceServer should be embedded to have forward compatible implementations.
type UnimplementedZoneKeeperServiceServer struct {
}

func (UnimplementedZoneKeeperServiceServer) SetState(context.Context, *SetStateRequest) (*SetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (UnimplementedZoneKeeperServiceServer) GetDeviceZone(context.Context, *GetDeviceZoneRequest) (*GetDeviceZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceZone not implemented")
}
func (UnimplementedZoneKeeperServiceServer) ActionHandler(context.Context, *ActionHandlerRequest) (*ActionHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionHandler not implemented")
}
func (UnimplementedZoneKeeperServiceServer) SelfAnnounce(context.Context, *SelfAnnounceRequest) (*SelfAnnounceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelfAnnounce not implemented")
}

// UnsafeZoneKeeperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZoneKeeperServiceServer will
// result in compilation errors.
type UnsafeZoneKeeperServiceServer interface {
	mustEmbedUnimplementedZoneKeeperServiceServer()
}

func RegisterZoneKeeperServiceServer(s grpc.ServiceRegistrar, srv ZoneKeeperServiceServer) {
	s.RegisterService(&ZoneKeeperService_ServiceDesc, srv)
}

func _ZoneKeeperService_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneKeeperServiceServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot.v1.ZoneKeeperService/SetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneKeeperServiceServer).SetState(ctx, req.(*SetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZoneKeeperService_GetDeviceZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneKeeperServiceServer).GetDeviceZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot.v1.ZoneKeeperService/GetDeviceZone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneKeeperServiceServer).GetDeviceZone(ctx, req.(*GetDeviceZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZoneKeeperService_ActionHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneKeeperServiceServer).ActionHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot.v1.ZoneKeeperService/ActionHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneKeeperServiceServer).ActionHandler(ctx, req.(*ActionHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZoneKeeperService_SelfAnnounce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelfAnnounceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneKeeperServiceServer).SelfAnnounce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot.v1.ZoneKeeperService/SelfAnnounce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneKeeperServiceServer).SelfAnnounce(ctx, req.(*SelfAnnounceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZoneKeeperService_ServiceDesc is the grpc.ServiceDesc for ZoneKeeperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZoneKeeperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iot.v1.ZoneKeeperService",
	HandlerType: (*ZoneKeeperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetState",
			Handler:    _ZoneKeeperService_SetState_Handler,
		},
		{
			MethodName: "GetDeviceZone",
			Handler:    _ZoneKeeperService_GetDeviceZone_Handler,
		},
		{
			MethodName: "ActionHandler",
			Handler:    _ZoneKeeperService_ActionHandler_Handler,
		},
		{
			MethodName: "SelfAnnounce",
			Handler:    _ZoneKeeperService_SelfAnnounce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iot/v1/iot.proto",
}
