// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: telemetry/v1/telemetry.proto

package telemetryv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/zachfi/iotcontroller/telemetry/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// TelemetryServiceName is the fully-qualified name of the TelemetryService service.
	TelemetryServiceName = "telemetry.v1.TelemetryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TelemetryServiceTelemetryReportIOTDeviceProcedure is the fully-qualified name of the
	// TelemetryService's TelemetryReportIOTDevice RPC.
	TelemetryServiceTelemetryReportIOTDeviceProcedure = "/telemetry.v1.TelemetryService/TelemetryReportIOTDevice"
)

// TelemetryServiceClient is a client for the telemetry.v1.TelemetryService service.
type TelemetryServiceClient interface {
	TelemetryReportIOTDevice(context.Context) *connect_go.ClientStreamForClient[v1.TelemetryReportIOTDeviceRequest, v1.TelemetryReportIOTDeviceResponse]
}

// NewTelemetryServiceClient constructs a client for the telemetry.v1.TelemetryService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTelemetryServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TelemetryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &telemetryServiceClient{
		telemetryReportIOTDevice: connect_go.NewClient[v1.TelemetryReportIOTDeviceRequest, v1.TelemetryReportIOTDeviceResponse](
			httpClient,
			baseURL+TelemetryServiceTelemetryReportIOTDeviceProcedure,
			opts...,
		),
	}
}

// telemetryServiceClient implements TelemetryServiceClient.
type telemetryServiceClient struct {
	telemetryReportIOTDevice *connect_go.Client[v1.TelemetryReportIOTDeviceRequest, v1.TelemetryReportIOTDeviceResponse]
}

// TelemetryReportIOTDevice calls telemetry.v1.TelemetryService.TelemetryReportIOTDevice.
func (c *telemetryServiceClient) TelemetryReportIOTDevice(ctx context.Context) *connect_go.ClientStreamForClient[v1.TelemetryReportIOTDeviceRequest, v1.TelemetryReportIOTDeviceResponse] {
	return c.telemetryReportIOTDevice.CallClientStream(ctx)
}

// TelemetryServiceHandler is an implementation of the telemetry.v1.TelemetryService service.
type TelemetryServiceHandler interface {
	TelemetryReportIOTDevice(context.Context, *connect_go.ClientStream[v1.TelemetryReportIOTDeviceRequest]) (*connect_go.Response[v1.TelemetryReportIOTDeviceResponse], error)
}

// NewTelemetryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTelemetryServiceHandler(svc TelemetryServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(TelemetryServiceTelemetryReportIOTDeviceProcedure, connect_go.NewClientStreamHandler(
		TelemetryServiceTelemetryReportIOTDeviceProcedure,
		svc.TelemetryReportIOTDevice,
		opts...,
	))
	return "/telemetry.v1.TelemetryService/", mux
}

// UnimplementedTelemetryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTelemetryServiceHandler struct{}

func (UnimplementedTelemetryServiceHandler) TelemetryReportIOTDevice(context.Context, *connect_go.ClientStream[v1.TelemetryReportIOTDeviceRequest]) (*connect_go.Response[v1.TelemetryReportIOTDeviceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("telemetry.v1.TelemetryService.TelemetryReportIOTDevice is not implemented"))
}
